# streamlit_app.py

import streamlit as st
import json
import time
from datetime import datetime
from main import run_pipeline

LOG_FILE = "logs/streamlit_submissions.json"

# ---------- Setup ----------
st.set_page_config(
    page_title="AI Helpdesk Assistant",
    page_icon="üõ†Ô∏è",
    layout="wide"
)

st.markdown("""
    <style>
        .title {
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 10px;
        }
        .section-header {
            font-size: 22px;
            margin-top: 30px;
            margin-bottom: 5px;
            font-weight: 600;
            color: #4a4a4a;
        }
        .badge {
            padding: 5px 10px;
            border-radius: 12px;
            font-size: 14px;
            font-weight: bold;
            color: white;
        }
        .low { background-color: #2ecc71; }
        .medium { background-color: #f1c40f; }
        .high { background-color: #e67e22; }
        .critical { background-color: #e74c3c; }
        .escalated { background-color: #c0392b; }
        .generated { color: #888; font-size: 13px; font-style: italic; margin-top: 5px; }
    </style>
""", unsafe_allow_html=True)

st.markdown('<div class="title">üõ†Ô∏è AI-Powered Helpdesk Assistant</div>', unsafe_allow_html=True)
st.write("Enter your ticket details on the left. Results will appear here.")

# ---------- Sidebar Form ----------
with st.sidebar:
    st.header("Submit a Ticket")
    with st.form("ticket_form"):
        title = st.text_input("Issue Title")
        description = st.text_area("Issue Description", height=150)
        name = st.text_input("Your Name")
        role = st.text_input("Role")
        department = st.selectbox("Department", ["Engineering", "Finance", "IT", "HR", "Operations", "Other"])
        submitted = st.form_submit_button("Submit")

# ---------- Handle Submission ----------
if submitted:
    if not title or not description or not name or not role:
        st.warning("Please fill in all fields.")
    else:
        with st.spinner("Processing your ticket..."):
            metadata = {"name": name, "role": role, "department": department}
            result = run_pipeline(title, description, metadata)
            time.sleep(0.5)

        # ---------- Display Results ----------
        st.markdown('<div class="section-header">üß† Summary</div>', unsafe_allow_html=True)
        st.success(result["summary"])

        st.markdown('<div class="section-header">‚úÖ Resolution</div>', unsafe_allow_html=True)
        st.info(result["resolution"])
        if "retrieved" in result["resolution"].lower():
            st.markdown('<div class="generated">Resolution was retrieved from similar ticket.</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="generated">Resolution was generated by AI.</div>', unsafe_allow_html=True)

        st.markdown('<div class="section-header">üè∑Ô∏è Classification</div>', unsafe_allow_html=True)
        urgency = result["classification"]["urgency"]
        issue_type = result["classification"]["issue_type"]
        st.markdown(f'<span class="badge {urgency}">Urgency: {urgency.title()}</span>', unsafe_allow_html=True)
        st.markdown(f'<br><span class="badge" style="background-color:#3498db;">Issue Type: {issue_type.title()}</span>', unsafe_allow_html=True)

        st.markdown('<div class="section-header">üö® Escalation Status</div>', unsafe_allow_html=True)
        if result["escalation"]:
            st.markdown('<span class="badge escalated">Escalated</span>', unsafe_allow_html=True)
        else:
            st.markdown('<span class="badge" style="background-color:#2d3436;">Not Escalated</span>', unsafe_allow_html=True)

        # ---------- Log and Download ----------
        log_entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "title": title,
            "description": description,
            "metadata": metadata,
            "result": result
        }

        try:
            with open(LOG_FILE, "a") as f:
                f.write(json.dumps(log_entry) + "\n")
        except Exception as e:
            st.error(f"Logging failed: {e}")

        st.download_button(
            label="üì• Download Ticket Summary",
            data=json.dumps(log_entry, indent=2),
            file_name="ticket_result.json",
            mime="application/json"
        )
